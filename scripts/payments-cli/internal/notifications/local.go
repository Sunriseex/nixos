package notifications

import (
	"fmt"
	"log/slog"
	"os/exec"
)

func SendLocalNotification(title, message string) error {
	slog.Debug("–û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–µ–ª–Ω–∏—è", "title", title)

	cmd := exec.Command("notify-send", title, message)
	err := cmd.Run()
	if err != nil {

		slog.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
			"title", title,
			"message", message,
			"error", err)

		return err
	}
	slog.Debug("–õ–æ–∫–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", "title", title)
	return nil
}
func SendPaymentLocalNotification(paymentName string, days int) {

	slog.Debug("–û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ",
		"payment_name", paymentName,
		"days", days)

	var title, message string
	switch {
	case days < 0:
		title = "üî¥ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω –ø–ª–∞—Ç–µ–∂"
		message = fmt.Sprintf("%s –ø—Ä–æ—Å—Ä–æ—á–µ–Ω –Ω–∞ %d –¥–Ω–µ–π", paymentName, -days)
	case days == 0:
		title = "üü† –ü–ª–∞—Ç–µ–∂ —Å–µ–≥–æ–¥–Ω—è"
		message = fmt.Sprintf("%s –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–ø–ª–∞—á–µ–Ω —Å–µ–≥–æ–¥–Ω—è", paymentName)
	case days <= 3:
		title = "üü° –°–∫–æ—Ä–æ –ø–ª–∞—Ç–µ–∂"
		message = fmt.Sprintf("%s —á–µ—Ä–µ–∑ %d –¥–Ω–µ–π", paymentName, days)
	default:
		slog.Debug("–£–≤–µ–¥–æ–º–µ–ª–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è", "payment_name", paymentName, "days", days)
		return
	}

	if err := SendLocalNotification(title, message); err != nil {
		slog.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ",
			"payment_name", paymentName,
			"error", err)
	}

}
