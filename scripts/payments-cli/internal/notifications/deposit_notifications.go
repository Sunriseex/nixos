package notifications

import (
	"fmt"
	"time"

	"github.com/sunriseex/payments-cli/internal/models"
	"github.com/sunriseex/payments-cli/pkg/calculator"
)

func CheckDepositNotifications(deposits []models.Deposit) []string {
	var notifications []string
	today := time.Now()
	for _, deposit := range deposits {
		if deposit.PromoEndDate != "" {
			promoEnd, err := time.Parse("2006-01-02", deposit.PromoEndDate)
			if err == nil {
				daysUntilPromoEnd := int(promoEnd.Sub(today).Hours() / 24)

				if daysUntilPromoEnd == 7 {
					notifications = append(notifications,
						fmt.Sprintf("üü° –ü–æ –≤–∫–ª–∞–¥—É '%s' –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞–∫—Ü–∏–æ–Ω–Ω–æ–π —Å—Ç–∞–≤–∫–∏ –æ—Å—Ç–∞–ª–æ—Å—å 7 –¥–Ω–µ–π", deposit.Name))
				} else if daysUntilPromoEnd == 3 {
					notifications = append(notifications,
						fmt.Sprintf("üü† –ü–æ –≤–∫–ª–∞–¥—É '%s' –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞–∫—Ü–∏–æ–Ω–Ω–æ–π —Å—Ç–∞–≤–∫–∏ –æ—Å—Ç–∞–ª–æ—Å—å 3 –¥–Ω—è", deposit.Name))
				} else if daysUntilPromoEnd == 1 {
					notifications = append(notifications,
						fmt.Sprintf("üî¥ –ü–æ –≤–∫–ª–∞–¥—É '%s' –∞–∫—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –∑–∞–≤—Ç—Ä–∞!", deposit.Name))
				}
			}
		}
		if deposit.Type == "term" && deposit.EndDate != "" {
			endDate, err := time.Parse("2006-01-02", deposit.EndDate)
			if err == nil {
				daysUntilEnd := int(endDate.Sub(today).Hours() / 24)

				if daysUntilEnd == 30 {
					income := calculator.CalculateIncome(deposit, 30)
					notifications = append(notifications,
						fmt.Sprintf("üìÖ –°—Ä–æ—á–Ω—ã–π –≤–∫–ª–∞–¥ '%s' –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ 30 –¥–Ω–µ–π. –û–∂–∏–¥–∞–µ–º—ã–π –¥–æ—Ö–æ–¥: %.2f —Ä—É–±.",
							deposit.Name, income))
				} else if daysUntilEnd <= 7 && daysUntilEnd > 0 {
					notifications = append(notifications,
						fmt.Sprintf("‚è∞ –í–∫–ª–∞–¥ '%s' –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ %d –¥–Ω–µ–π", deposit.Name, daysUntilEnd))
				}
			}
		}
		if deposit.TopUpEndDate != "" {
			topUpEnd, err := time.Parse("2006-01-02", deposit.TopUpEndDate)
			if err == nil {
				daysUntilTopUpEnd := int(topUpEnd.Sub(today).Hours() / 24)

				if daysUntilTopUpEnd == 3 {
					notifications = append(notifications,
						fmt.Sprintf("üí≥ –ü–æ –≤–∫–ª–∞–¥—É '%s' –ø–µ—Ä–∏–æ–¥ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ 3 –¥–Ω—è", deposit.Name))
				} else if daysUntilTopUpEnd == 1 {
					notifications = append(notifications,
						fmt.Sprintf("üí∞ –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤–∫–ª–∞–¥–∞ '%s'!", deposit.Name))
				}
			}
		}
	}
	return notifications
}

func SendDepositNotification(title, message string) {
	SendLocalNotification(title, message)
	SendTelegramNotification(fmt.Sprintf("%s: %s", title, message))
}
