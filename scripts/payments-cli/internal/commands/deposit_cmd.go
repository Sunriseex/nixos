package commands

import (
	"fmt"
	"strconv"
	"strings"
	"time"

	"github.com/sunriseex/payments-cli/internal/config"
	"github.com/sunriseex/payments-cli/internal/models"
	"github.com/sunriseex/payments-cli/internal/notifications"
	"github.com/sunriseex/payments-cli/internal/storage"
	"github.com/sunriseex/payments-cli/pkg/calculator"
	"github.com/sunriseex/payments-cli/pkg/errors"
	"github.com/sunriseex/payments-cli/pkg/utils"
	"github.com/sunriseex/payments-cli/pkg/validation"
)

func DepositCreate(name, bank, depositType string, amount int, interestRate float64, termMonths int, promoRate *float64, promoEndDate string) error {
	validator := validation.NewDepositValidator()
	if err := validator.ValidateCreateRequest(name, bank, depositType, amount, interestRate, termMonths, promoRate, promoEndDate); err != nil {
		return errors.NewValidationError(
			"–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∫–ª–∞–¥–∞",
			map[string]interface{}{
				"name":          name,
				"bank":          bank,
				"type":          depositType,
				"amount":        amount,
				"interest_rate": interestRate,
				"term_months":   termMonths,
			},
		)
	}

	deposit := &models.Deposit{
		Name:          strings.TrimSpace(name),
		Bank:          bank,
		Type:          depositType,
		Amount:        amount,
		InitialAmount: amount,
		InterestRate:  interestRate,
		PromoRate:     promoRate,
		PromoEndDate:  promoEndDate,
		StartDate:     time.Now().Format("2006-01-02"),
		AutoRenewal:   true,
	}

	if bank == "–Ø–Ω–¥–µ–∫—Å –ë–∞–Ω–∫" || bank == "Yandex" {
		deposit.Capitalization = "daily"
	} else {
		deposit.Capitalization = "daily"
	}

	if depositType == "term" {
		deposit.TermMonths = termMonths
		endDate, err := calculator.CalculateMaturityDate(deposit.StartDate, termMonths)
		if err != nil {
			return errors.WrapError(
				errors.ErrCalculation,
				"–æ—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤–∫–ª–∞–¥–∞",
				err,
			)
		}
		deposit.EndDate = endDate
		deposit.TopUpEndDate = calculator.CalculateTopUpEndDate(deposit.StartDate)
	}

	if err := validator.Validate(deposit); err != nil {
		return errors.NewValidationError(
			"–æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤–∫–ª–∞–¥–∞",
			map[string]interface{}{
				"deposit_name":     deposit.Name,
				"validation_error": err.Error(),
			},
		)
	}

	if err := storage.CreateDeposit(deposit, config.AppConfig.DepositsDataPath); err != nil {
		return errors.NewStorageError("—Å–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∞", err)
	}

	fmt.Printf("‚úÖ –í–∫–ª–∞–¥ '%s' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω\n", name)
	if promoRate != nil {
		fmt.Printf("   –ü—Ä–æ–º–æ-—Å—Ç–∞–≤–∫–∞: %.2f%% (–¥–æ %s)\n", *promoRate, promoEndDate)
	}

	amountRubles := float64(amount) / 100.0
	fmt.Printf("   –°—É–º–º–∞: %.2f —Ä—É–±.\n", amountRubles)
	fmt.Printf("   –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞: %.2f%%\n", interestRate)
	if deposit.Type == "term" {
		fmt.Printf("   –°—Ä–æ–∫: %d –º–µ—Å—è—Ü–µ–≤\n", termMonths)
		fmt.Printf("   –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: %s\n", deposit.EndDate)
	}

	return nil
}

func DepositList() error {
	data, err := storage.LoadDeposits(config.AppConfig.DepositsDataPath)
	if err != nil {
		return errors.NewStorageError("–∑–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –≤–∫–ª–∞–¥–æ–≤", err)
	}

	if len(data.Deposits) == 0 {
		fmt.Println("üíº –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–∫–ª–∞–¥–æ–≤")
		return nil
	}

	fmt.Println("üíº –ê–ö–¢–ò–í–ù–´–ï –í–ö–õ–ê–î–´:")
	fmt.Println("===================")
	totalAmount := 0

	for i, deposit := range data.Deposits {
		amountRubles := float64(deposit.Amount) / 100.0
		totalAmount += deposit.Amount

		fmt.Printf("%d. %s (%s)\n", i+1, deposit.Name, deposit.Bank)
		fmt.Printf("   –°—É–º–º–∞: %.2f —Ä—É–±.\n", amountRubles)

		active, daysLeft := calculator.CheckPromoStatus(deposit)
		if active {
			fmt.Printf("   –ü—Ä–æ–º–æ-—Å—Ç–∞–≤–∫–∞: %.2f%% (–¥–æ %s, –æ—Å—Ç–∞–ª–æ—Å—å %d –¥–Ω.)\n",
				*deposit.PromoRate, deposit.PromoEndDate, daysLeft)
		} else {
			fmt.Printf("   –°—Ç–∞–≤–∫–∞: %.2f%%\n", deposit.InterestRate)
		}

		fmt.Printf("   –¢–∏–ø: %s\n", deposit.Type)

		monthlyIncome := calculator.CalculateIncome(deposit, 30)
		monthlyIncomeFloat, _ := monthlyIncome.Float64()
		fmt.Printf("   –î–æ—Ö–æ–¥ –≤ –º–µ—Å—è—Ü: ~%.2f —Ä—É–±.\n", monthlyIncomeFloat)
		fmt.Println()
	}

	totalRubles := float64(totalAmount) / 100.0
	fmt.Printf("üìä –ò–¢–û–ì–û: %d –≤–∫–ª–∞–¥–æ–≤ –Ω–∞ —Å—É–º–º—É %.2f —Ä—É–±.\n", len(data.Deposits), totalRubles)
	return nil
}

func DepositTopUp(depositID string, amount int) error {
	if amount <= 0 {
		return errors.NewValidationError(
			"—Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π",
			map[string]interface{}{
				"amount":     amount,
				"deposit_id": depositID,
			},
		)
	}

	if amount > 10000000 {
		return errors.NewValidationError(
			"—Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è",
			map[string]interface{}{
				"amount":      amount,
				"max_allowed": 10000000,
				"deposit_id":  depositID,
			},
		)
	}

	if err := storage.UpdateDepositAmount(depositID, amount, config.AppConfig.DepositsDataPath); err != nil {
		return errors.WrapError(
			errors.ErrStorage,
			"–æ—à–∏–±–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤–∫–ª–∞–¥–∞",
			err,
		)
	}

	fmt.Printf("‚úÖ –í–∫–ª–∞–¥ —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ %.2f —Ä—É–±.\n", float64(amount)/100.0)
	return nil
}

func DepositCalculateIncome(depositID string, days int) error {
	data, err := storage.LoadDeposits(config.AppConfig.DepositsDataPath)
	if err != nil {
		return errors.NewStorageError("–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Ö–æ–¥–∞", err)
	}

	var foundDeposit *models.Deposit
	for i := range data.Deposits {
		if data.Deposits[i].ID == depositID {
			foundDeposit = &data.Deposits[i]
			break
		}
	}

	if foundDeposit == nil {
		return errors.NewNotFoundError("–≤–∫–ª–∞–¥", depositID)
	}

	income := calculator.CalculateIncome(*foundDeposit, days)
	incomeFloat, _ := income.Float64()
	amountRubles := float64(foundDeposit.Amount) / 100.0

	fmt.Printf("üìà –†–∞—Å—á–µ—Ç –¥–æ—Ö–æ–¥–∞ –ø–æ –≤–∫–ª–∞–¥—É '%s':\n", foundDeposit.Name)
	fmt.Printf("   –°—É–º–º–∞ –≤–∫–ª–∞–¥–∞: %.2f —Ä—É–±.\n", amountRubles)
	fmt.Printf("   –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞: %.2f%%\n", foundDeposit.InterestRate)
	fmt.Printf("   –ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è: %s\n", foundDeposit.Capitalization)
	fmt.Printf("   –ü–µ—Ä–∏–æ–¥: %d –¥–Ω–µ–π\n", days)
	fmt.Printf("   –û–∂–∏–¥–∞–µ–º—ã–π –¥–æ—Ö–æ–¥: %.2f —Ä—É–±.\n", incomeFloat)
	fmt.Printf("   –û–±—â–∞—è —Å—É–º–º–∞: %.2f —Ä—É–±.\n", amountRubles+incomeFloat)

	return nil
}

func DepositUpdate(depositID string) error {
	deposit, err := storage.GetDepositByID(depositID, config.AppConfig.DepositsDataPath)
	if err != nil {
		return errors.NewNotFoundError("–≤–∫–ª–∞–¥", depositID)
	}

	if deposit.Type != "term" {
		return errors.NewBusinessLogicError(
			"—Ç–æ–ª—å–∫–æ —Å—Ä–æ—á–Ω—ã–µ –≤–∫–ª–∞–¥—ã –º–æ–≥—É—Ç –±—ã—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω—ã (–ø—Ä–æ–ª–æ–Ω–≥–∏—Ä–æ–≤–∞–Ω—ã)",
			map[string]interface{}{
				"deposit_id":   depositID,
				"deposit_type": deposit.Type,
			},
		)
	}

	if !calculator.CanBeProlonged(*deposit) {
		return errors.NewBusinessLogicError(
			"–≤–∫–ª–∞–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–ª–æ–Ω–≥–∏—Ä–æ–≤–∞–Ω –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç",
			map[string]interface{}{
				"deposit_id": depositID,
				"end_date":   deposit.EndDate,
			},
		)
	}

	today := time.Now().Format("2006-01-02")
	deposit.StartDate = today

	endDate, err := calculator.CalculateMaturityDate(today, deposit.TermMonths)
	if err != nil {
		return errors.NewCalculationError(
			"–æ—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–∫–ª–∞–¥–∞",
			err,
		)
	}
	deposit.EndDate = endDate
	deposit.TopUpEndDate = calculator.CalculateTopUpEndDate(today)

	validator := validation.NewDepositValidator()
	if err := validator.Validate(deposit); err != nil {
		return errors.NewValidationError(
			"–æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
			map[string]interface{}{
				"deposit_name":     deposit.Name,
				"validation_error": err.Error(),
			},
		)
	}

	if err := storage.UpdateDeposit(deposit, config.AppConfig.DepositsDataPath); err != nil {
		return errors.NewStorageError("–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∫–ª–∞–¥–∞", err)
	}

	fmt.Printf("‚úÖ –í–∫–ª–∞–¥ '%s' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω\n", deposit.Name)
	fmt.Printf("   –ù–æ–≤–∞—è –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: %s\n", deposit.StartDate)
	fmt.Printf("   –ù–æ–≤–∞—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: %s\n", deposit.EndDate)
	fmt.Printf("   –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: %s\n", deposit.TopUpEndDate)

	return nil
}

func DepositAccrueInterest() error {
	data, err := storage.LoadDeposits(config.AppConfig.DepositsDataPath)
	if err != nil {
		return errors.NewStorageError("–∑–∞–≥—Ä—É–∑–∫–∞ –≤–∫–ª–∞–¥–æ–≤ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤", err)
	}

	totalAccrued := 0.0
	accruals := 0
	var errorsList []error

	for _, deposit := range data.Deposits {
		var income float64
		var description string

		if deposit.Type == "savings" {
			incomeBig := calculator.CalculateIncome(deposit, 1)
			income, _ = incomeBig.Float64()
			description = "–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –≤—ã–ø–ª–∞—Ç–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤"
		} else if deposit.Type == "term" {
			if calculator.IsDepositExpired(deposit) {
				daysPassed := daysSince(deposit.StartDate)
				if daysPassed > 0 {
					incomeBig := calculator.CalculateIncome(deposit, daysPassed)
					income, _ = incomeBig.Float64()
					description = "–í—ã–ø–ª–∞—Ç–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ —Å—Ä–æ–∫–∞"
				}
			} else {
				continue
			}
		}

		if income > 0 {
			amountKopecks := int(income * 100)

			if err := storage.RecordDepositToLedger(deposit, "interest", amountKopecks, description, config.AppConfig.LedgerPath); err != nil {
				errMsg := errors.WrapError(
					errors.ErrStorage,
					fmt.Sprintf("–æ—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ ledger –¥–ª—è –≤–∫–ª–∞–¥–∞ '%s'", deposit.Name),
					err,
				)
				errorsList = append(errorsList, errMsg)
				continue
			}

			if err := storage.UpdateDepositAmount(deposit.ID, amountKopecks, config.AppConfig.DepositsDataPath); err != nil {
				errMsg := errors.WrapError(
					errors.ErrStorage,
					fmt.Sprintf("–æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É–º–º—ã –≤–∫–ª–∞–¥–∞ '%s'", deposit.Name),
					err,
				)
				errorsList = append(errorsList, errMsg)
				continue
			}

			totalAccrued += income
			accruals++

			fmt.Printf("‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω—ã –ø—Ä–æ—Ü–µ–Ω—Ç—ã –ø–æ –≤–∫–ª–∞–¥—É '%s': %.2f —Ä—É–±.\n", deposit.Name, income)
		}
	}

	if accruals > 0 {
		fmt.Printf("\nüìä –í—Å–µ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ: %.2f —Ä—É–±. –ø–æ %d –≤–∫–ª–∞–¥–∞–º\n", totalAccrued, accruals)
	} else {
		fmt.Println("‚ÑπÔ∏è  –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∫–ª–∞–¥–æ–≤ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤")
	}

	if len(errorsList) > 0 {
		fmt.Println("\n‚ö†Ô∏è  –ü—Ä–æ–∏–∑–æ—à–ª–∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤:")
		for _, err := range errorsList {
			fmt.Printf("   ‚Ä¢ %s\n", errors.GetUserFriendlyMessage(err))
		}
		return errors.NewBusinessLogicError(
			"–Ω–µ –≤—Å–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –±—ã–ª–∏ –Ω–∞—á–∏—Å–ª–µ–Ω—ã –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫",
			map[string]interface{}{
				"total_errors":        len(errorsList),
				"successful_accruals": accruals,
			},
		)
	}

	return nil
}

func ParseRubles(amountStr string) (int, error) {
	amountStr = strings.Replace(amountStr, ",", ".", -1)
	amount, err := strconv.ParseFloat(amountStr, 64)
	if err != nil {
		return 0, errors.NewValidationError(
			"–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã",
			map[string]interface{}{
				"amount": amountStr,
				"error":  err.Error(),
			},
		)
	}

	if amount <= 0 {
		return 0, errors.NewValidationError(
			"—Å—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π",
			map[string]interface{}{
				"amount": amount,
			},
		)
	}

	if amount > 1000000 {
		return 0, errors.NewValidationError(
			"—Å—É–º–º–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è",
			map[string]interface{}{
				"amount":     amount,
				"max_amount": 1000000,
			},
		)
	}

	return int(amount * 100), nil
}

func ParseDays(daysStr string) (int, error) {
	days, err := strconv.Atoi(daysStr)
	if err != nil {
		return 0, errors.NewValidationError(
			"–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π",
			map[string]interface{}{
				"days":  daysStr,
				"error": err.Error(),
			},
		)
	}
	if days <= 0 {
		return 0, errors.NewValidationError(
			"–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º",
			map[string]interface{}{
				"days": days,
			},
		)
	}
	if days > 3650 {
		return 0, errors.NewValidationError(
			"–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ",
			map[string]interface{}{
				"days":     days,
				"max_days": 3650,
			},
		)
	}
	return days, nil
}

func ParseRate(rateStr string) (float64, error) {
	rateStr = strings.Replace(rateStr, ",", ".", -1)
	rate, err := strconv.ParseFloat(rateStr, 64)
	if err != nil {
		return 0, errors.NewValidationError(
			"–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π —Å—Ç–∞–≤–∫–∏",
			map[string]interface{}{
				"rate":  rateStr,
				"error": err.Error(),
			},
		)
	}
	if rate <= 0 {
		return 0, errors.NewValidationError(
			"–ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π",
			map[string]interface{}{
				"rate": rate,
			},
		)
	}
	if rate > 100 {
		return 0, errors.NewValidationError(
			"–ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 100%",
			map[string]interface{}{
				"rate": rate,
			},
		)
	}
	return rate, nil
}

func ParseTerm(termStr string) (int, error) {
	term, err := strconv.Atoi(termStr)
	if err != nil {
		return 0, errors.NewValidationError(
			"–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ä–æ–∫–∞",
			map[string]interface{}{
				"term":  termStr,
				"error": err.Error(),
			},
		)
	}
	if term <= 0 {
		return 0, errors.NewValidationError(
			"—Å—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º",
			map[string]interface{}{
				"term": term,
			},
		)
	}
	if term > 60 {
		return 0, errors.NewValidationError(
			"—Å—Ä–æ–∫ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 60 –º–µ—Å—è—Ü–µ–≤",
			map[string]interface{}{
				"term":     term,
				"max_term": 60,
			},
		)
	}
	return term, nil
}

func DepositFind(name, bank string) error {
	deposit, err := storage.FindDepositByNameAndBank(name, bank, config.AppConfig.DepositsDataPath)
	if err != nil {
		return errors.NewStorageError("–ø–æ–∏—Å–∫ –≤–∫–ª–∞–¥–∞", err)
	}

	if deposit == nil {
		fmt.Printf("–í–∫–ª–∞–¥ '%s' –≤ –±–∞–Ω–∫–µ '%s' –Ω–µ –Ω–∞–π–¥–µ–Ω\n", name, bank)
		return nil
	}

	amountRubles := float64(deposit.Amount) / 100.0
	fmt.Printf("–ù–∞–π–¥–µ–Ω –≤–∫–ª–∞–¥:\n")
	fmt.Printf("  ID: %s\n", deposit.ID)
	fmt.Printf("  –ù–∞–∑–≤–∞–Ω–∏–µ: %s\n", deposit.Name)
	fmt.Printf("  –ë–∞–Ω–∫: %s\n", deposit.Bank)
	fmt.Printf("  –¢–∏–ø: %s\n", deposit.Type)
	fmt.Printf("  –°—É–º–º–∞: %.2f —Ä—É–±.\n", amountRubles)
	fmt.Printf("  –°—Ç–∞–≤–∫–∞: %.2f%%\n", deposit.InterestRate)

	if deposit.Type == "term" {
		fmt.Printf("  –°—Ä–æ–∫: %d –º–µ—Å—è—Ü–µ–≤\n", deposit.TermMonths)
		if deposit.EndDate != "" {
			daysLeft := utils.DaysUntil(deposit.EndDate)
			fmt.Printf("  –î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è: %d –¥–Ω–µ–π\n", daysLeft)
		}
	}

	return nil
}

func daysSince(startDate string) int {
	start, err := time.Parse("2006-01-02", startDate)
	if err != nil {
		return 0
	}
	days := int(time.Since(start).Hours() / 24)
	if days < 0 {
		return 0
	}
	return days
}

func formatBankName(bank string) string {
	switch bank {
	case "–Ø–Ω–¥–µ–∫—Å –ë–∞–Ω–∫", "Yandex":
		return "Yandex"
	case "–ê–ª—å—Ñ–∞ –ë–∞–Ω–∫", "Alfa":
		return "AlfaBank"
	case "–¢–∏–Ω—å–∫–æ—Ñ—Ñ", "Tinkoff":
		return "Tbank"
	default:
		return strings.ReplaceAll(bank, " ", "")
	}
}

func DepositCheckNotifications() error {
	data, err := storage.LoadDeposits(config.AppConfig.DepositsDataPath)
	if err != nil {
		return errors.NewStorageError("–∑–∞–≥—Ä—É–∑–∫–∞ –≤–∫–ª–∞–¥–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", err)
	}

	notificationsList := notifications.CheckDepositNotifications(data.Deposits)

	if len(notificationsList) == 0 {
		fmt.Println("‚ÑπÔ∏è  –ù–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ –≤–∫–ª–∞–¥–∞–º")
		return nil
	}

	fmt.Println("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –≤–∫–ª–∞–¥–∞–º:")
	fmt.Println("======================")
	for _, notification := range notificationsList {
		fmt.Println("‚Ä¢", notification)
	}

	return nil
}
