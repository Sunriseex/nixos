// Package commands
package commands

import (
	"flag"
	"fmt"
	"os"
	"sort"
	"strings"
	"time"

	"github.com/google/uuid"

	"github.com/sunriseex/payments-cli/internal/config"
	"github.com/sunriseex/payments-cli/internal/models"
	"github.com/sunriseex/payments-cli/internal/storage"
	"github.com/sunriseex/payments-cli/pkg/utils"
)

func getNearestPayment() *models.Payment {
	data, err := storage.LoadPayments(config.AppConfig.DataPath)
	if err != nil {
		fmt.Printf("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: %v\n", err)
		return nil
	}

	if data == nil || len(data.Payments) == 0 {
		return nil
	}

	var nearest *models.Payment
	minDays := 999

	for i := range data.Payments {
		currentPayment := data.Payments[i]

		if currentPayment.PaymentDate != "" {
			continue
		}

		if currentPayment.DueDate == "" {
			continue
		}

		days := utils.DaysUntil(currentPayment.DueDate)
		if days < minDays {
			minDays = days
			paymentCopy := currentPayment
			nearest = &paymentCopy
		}
	}

	return nearest
}

func DisplayWidget() {
	payment := getNearestPayment()
	if payment == nil {
		fmt.Println("üí≥ –ù–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π")
		return
	}

	if payment.DueDate == "" {
		fmt.Println("üí≥ –û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞—Ç—ã –ø–ª–∞—Ç–µ–∂–∞")
		return
	}

	days := utils.DaysUntil(payment.DueDate)
	amount := utils.FormatRubles(payment.Amount)

	name := payment.Name
	if len(name) > 15 {
		name = name[:15] + "‚Ä¶"
	}

	var icon string

	switch {
	case days < 0:
		icon = "üî¥"
	case days == 0:
		icon = "üü†"
	case days <= 7:
		icon = "üü°"
	default:
		icon = "üü¢"
	}
	intervalInfo := ""
	if payment.DaysInterval > 0 {
		intervalInfo = fmt.Sprintf(" [%d–¥]", payment.DaysInterval)
	}

	fmt.Printf("%s %s %s‚ÇΩ ¬∑ %d–¥%s\n", icon, name, amount, days, intervalInfo)
}
func MarkPaid() error {
	data, err := storage.LoadPayments(config.AppConfig.DataPath)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: %v", err)
	}

	payment := getNearestPayment()
	if payment == nil {
		return fmt.Errorf("–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π")
	}

	today := time.Now().Format("2006-01-02")

	if err := storage.RecordPaymentToLedger(*payment, config.AppConfig.LedgerPath); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ ledger: %v", err)
	}

	fmt.Printf("–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º:\n")
	fmt.Printf("  –ü–ª–∞—Ç–µ–∂: %s, ID: %s, Type: %s\n", payment.Name, payment.ID, payment.Type)

	found := false
	for i := range data.Payments {
		if data.Payments[i].ID == payment.ID {
			found = true
			fmt.Printf("  –ù–∞–π–¥–µ–Ω –ø–ª–∞—Ç–µ–∂ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: %s\n", data.Payments[i].Name)

			if payment.Type == "one-time" {
				data.Payments[i].PaymentDate = today
				fmt.Printf("  ‚úÖ –†–∞–∑–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ '%s' –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π\n", payment.Name)
			} else {
				newDueDate := extendPaymentDate(data.Payments[i])
				data.Payments[i].DueDate = newDueDate
				data.Payments[i].PaymentDate = ""

				intervalInfo := ""
				if payment.DaysInterval > 0 {
					intervalInfo = fmt.Sprintf(" (–∏–Ω—Ç–µ—Ä–≤–∞–ª %d –¥–Ω–µ–π)", payment.DaysInterval)
				}

				fmt.Printf("  ‚úÖ –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è –ø–ª–∞—Ç–µ–∂ '%s' –æ–±–Ω–æ–≤–ª–µ–Ω. –°–ª–µ–¥—É—é—â–∏–π –ø–ª–∞—Ç–µ–∂: %s%s\n",
					payment.Name, newDueDate, intervalInfo)
			}
			break
		}
	}

	if !found {
		return fmt.Errorf("–ø–ª–∞—Ç–µ–∂ —Å ID %s –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö", payment.ID)
	}

	if err := storage.SavePayments(data, config.AppConfig.DataPath); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: %v", err)
	}

	fmt.Printf("  –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã\n")

	DisplayWidget()
	return nil
}
func extendPaymentDate(payment models.Payment) string {
	baseDate := time.Now()

	if payment.Type == "one-time" {
		return baseDate.Format("2006-01-02")
	}

	if payment.DaysInterval > 0 {
		return baseDate.AddDate(0, 0, payment.DaysInterval).Format("2006-01-02")
	}
	switch payment.Type {
	case "yearly":
		return baseDate.AddDate(1, 0, 0).Format("2006-01-02")
	case "monthly":
		return baseDate.AddDate(0, 1, 0).Format("2006-01-02")
	default:
		return baseDate.AddDate(0, 1, 0).Format("2006-01-02")
	}
}

func ListPayments() error {
	data, err := storage.LoadPayments(config.AppConfig.DataPath)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: %v", err)
	}
	var activePayments []models.Payment
	totalAmount := 0
	for _, p := range data.Payments {
		if p.PaymentDate == "" {
			activePayments = append(activePayments, p)
			totalAmount += p.Amount
		}
	}
	if len(activePayments) == 0 {
		fmt.Println("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π")
		return nil
	}
	sort.Slice(activePayments, func(i, j int) bool {
		return utils.DaysUntil(activePayments[i].DueDate) < utils.DaysUntil(activePayments[j].DueDate)
	})
	var overdue, urgent, upcoming []models.Payment
	for _, p := range activePayments {
		days := utils.DaysUntil(p.DueDate)
		switch {
		case days < 0:
			overdue = append(overdue, p)
		case days <= 7:
			urgent = append(urgent, p)
		default:
			upcoming = append(upcoming, p)
		}
	}
	fmt.Println("–ê–ö–¢–ò–í–ù–´–ï –ü–õ–ê–¢–ï–ñ–ò:")
	fmt.Println("-----------------")
	fmt.Println("")
	if len(overdue) > 0 {
		fmt.Println("üî¥ –°–†–û–ß–ù–û (–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ):")
		for _, p := range overdue {
			days := utils.DaysUntil(p.DueDate)
			amountRubles := utils.FormatRubles(p.Amount)
			fmt.Printf("   ‚Ä¢ %s: %s‚ÇΩ (%d –¥–Ω–µ–π) [%s]", p.Name, amountRubles, -days, p.Type)
			if p.LedgerAccount != "" {
				fmt.Printf(" [%s]", p.LedgerAccount)
			}
			fmt.Println()
		}
		fmt.Println()
	}
	if len(urgent) > 0 {
		fmt.Println("üü° –ë–õ–ò–ñ–ê–ô–®–ò–ï:")
		for _, p := range urgent {
			days := utils.DaysUntil(p.DueDate)
			amountRubles := utils.FormatRubles(p.Amount)
			fmt.Printf("   ‚Ä¢ %s: %s‚ÇΩ (%d –¥–Ω–µ–π) [%s]", p.Name, amountRubles, days, p.Type)
			if p.LedgerAccount != "" {
				fmt.Printf(" [%s]", p.PaymentDate)
			}
			fmt.Println()
		}
		fmt.Println()
	}
	if len(upcoming) > 0 {
		fmt.Println("üü¢ –û–ñ–ò–î–ê–ï–ú–´–ï:")
		for _, p := range upcoming {
			days := utils.DaysUntil(p.DueDate)
			amountRubles := utils.FormatRubles(p.Amount)
			fmt.Printf("   ‚Ä¢ %s: %s‚ÇΩ (%d –¥–Ω–µ–π) [%s]", p.Name, amountRubles, days, p.Type)
			if p.LedgerAccount != "" {
				fmt.Printf(" [%s]", p.LedgerAccount)
			}
			fmt.Println()
		}
		fmt.Println()
	}
	totalRubles := utils.FormatRubles(totalAmount)
	fmt.Printf("üìä –ò–¢–û–ì–û: %d –ø–ª–∞—Ç–µ–∂–µ–π –Ω–∞ %s‚ÇΩ\n", len(activePayments), totalRubles)

	return nil
}

func AddPayment() error {
	addCmd := flag.NewFlagSet("add", flag.ExitOnError)
	name := addCmd.String("name", "", "–ù–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞")
	amountStr := addCmd.String("amount", "", "–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ –≤ —Ä—É–±–ª—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 349.90)")
	dueDate := addCmd.String("date", "", "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è (–ì–ì–ì–ì-–ú–ú-–î–î)")
	days := addCmd.Int("days", 0, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –¥–∞—Ç–µ)")
	paymentType := addCmd.String("type", "monthly", "–¢–∏–ø: monthly, yearly, one-time")
	category := addCmd.String("category", "", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è")
	ledgerAccount := addCmd.String("ledger-account", "", "–°—á–µ—Ç –¥–ª—è ledger")

	addCmd.Parse(os.Args[2:])

	if *name == "" || *amountStr == "" {
		return fmt.Errorf("–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å --name –∏ --amount")
	}
	amount, err := utils.RublesToKopecks(*amountStr)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Å—É–º–º—ã: %v", err)
	}
	var finalDueDate string
	if *days > 0 {
		finalDueDate = time.Now().AddDate(0, 0, *days).Format("2006-01-02")
	} else if *dueDate != "" {
		_, err = time.Parse("2006-01-02", *dueDate)
		if err != nil {
			return fmt.Errorf("–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD: %v", err)
		}
		finalDueDate = *dueDate
	} else {
		return fmt.Errorf("–Ω–µ–æ–±—Ö–æ–¥–∏–º–∞—è —É–∫–∞–∑–∞—Ç—å –ª–∏–±–æ --date, –ª–∏–±–æ --days")
	}
	validTypes := map[string]bool{
		"monthly":  true,
		"yearly":   true,
		"one-time": true,
	}
	if !validTypes[*paymentType] {
		return fmt.Errorf("–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø. –î–æ–ø—É—Å—Ç–∏–º—ã–µ: monthly, yearly, one-time")
	}
	data, err := storage.LoadPayments(config.AppConfig.DataPath)
	if err != nil {
		data = &models.PaymentData{Payments: []models.Payment{}}
	}
	id := uuid.New().String()
	newPayment := models.Payment{
		ID:            id,
		Name:          *name,
		Amount:        amount,
		DueDate:       finalDueDate,
		Type:          *paymentType,
		Category:      *category,
		LedgerAccount: *ledgerAccount,
		DaysInterval:  *days,
	}
	data.Payments = append(data.Payments, newPayment)
	if err := storage.SavePayments(data, config.AppConfig.DataPath); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: %v", err)
	}
	intervalInfo := ""
	if *days > 0 {
		intervalInfo = fmt.Sprintf(" [–∏–Ω—Ç–µ—Ä–≤–∞–ª %d –¥–Ω–µ–π]", *days)
	}
	accountInfo := ""
	if *ledgerAccount != "" {
		accountInfo = fmt.Sprintf(" -> %s", *ledgerAccount)
	}
	amountRubles := utils.FormatRubles(amount)
	fmt.Printf("–ü–ª–∞—Ç–µ–∂ –¥–æ–±–∞–≤–ª–µ–Ω: %s - %s‚ÇΩ - %s [%s]%s%s\n", *name, amountRubles, finalDueDate, *paymentType, intervalInfo, accountInfo)

	return nil
}

func ShowLedger() error {
	ledgerPath := storage.ExpandPath(config.AppConfig.LedgerPath)
	if _, err := os.Stat(ledgerPath); os.IsNotExist(err) {
		return fmt.Errorf("ledger —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
	}
	content, err := os.ReadFile(ledgerPath)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è ledger —Ñ–∞–π–ª: %v", err)
	}
	lines := strings.Split(string(content), "\n")
	recentLines := lines[len(lines)-10:]
	fmt.Println("–ü–æ—Å–ª–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ Ledger:")
	for _, line := range recentLines {
		if strings.TrimSpace(line) != "" {
			fmt.Println(line)
		}
	}
	return nil
}

func CleanupPayments() error {
	data, err := storage.LoadPayments(config.AppConfig.DataPath)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: %v", err)
	}
	initialCount := len(data.Payments)
	cleanedData := cleanupOldPayments(*data)
	if err := storage.SavePayments(&cleanedData, config.AppConfig.DataPath); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: %v", err)
	}
	fmt.Printf("–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ %d —Å—Ç–∞—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π\n", initialCount-len(cleanedData.Payments))
	return nil
}

func cleanupOldPayments(data models.PaymentData) models.PaymentData {
	var validPayments []models.Payment
	now := time.Now()
	cutoffDate := now.AddDate(0, 0, -7)
	for _, payment := range data.Payments {
		if payment.PaymentDate != "" {
			validPayments = append(validPayments, payment)
			continue
		}
		due, err := time.Parse("2006-01-02", payment.DueDate)
		if err != nil {
			validPayments = append(validPayments, payment)
			continue
		}
		if due.After(cutoffDate) {
			validPayments = append(validPayments, payment)
		}
	}
	data.Payments = validPayments
	return data
}

func ShowHelp() {
	fmt.Println(`Payments CLI - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞–º–∏

–ö–æ–º–∞–Ω–¥—ã:
  payments-cli                    - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∏–¥–∂–µ—Ç —Å –±–ª–∏–∂–∞–π—à–∏–º –ø–ª–∞—Ç–µ–∂–æ–º
  payments-cli paid               - –û—Ç–º–µ—Ç–∏—Ç—å –±–ª–∏–∂–∞–π—à–∏–π –ø–ª–∞—Ç–µ–∂ –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π
  payments-cli list               - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
  payments-cli add                - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂
  payments-cli ledger             - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ Ledger
  payments-cli cleanup            - –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –ø–ª–∞—Ç–µ–∂–∏

–ö–æ–º–∞–Ω–¥–∞ add (–ø—Ä–∏–º–µ—Ä—ã):
  # –° —É–∫–∞–∑–∞–Ω–∏–µ–º –¥–∞—Ç—ã
  payments-cli add --name "Yandex Plus" --amount 349.90 --date 2024-10-22 --type monthly --category subscriptions
  
  # –° —É–∫–∞–∑–∞–Ω–∏–µ–º –¥–Ω–µ–π
  payments-cli add --name "–•–æ—Å—Ç–∏–Ω–≥" --amount 1500.00 --days 40 --type one-time --category hosting
  
  # –° —É–∫–∞–∑–∞–Ω–∏–µ–º —Å—á–µ—Ç–∞ Ledger
  payments-cli add --name "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç" --amount 500.00 --date 2024-11-01 --type monthly --category utilities --ledger-account Liabilities:AlfaBank`)
}
