package main

import (
	"encoding/json"
	"flag"
	"fmt"
	"os"
	"path/filepath"
	"sort"
	"strconv"
	"strings"
	"time"
)

type Payment struct {
	ID            string `json:"id"`
	Name          string `json:"name"`
	Amount        int    `json:"amount"`
	DueDate       string `json:"due_date"`
	PaymentDate   string `json:"payment_date,omitempty"`
	Type          string `json:"type"`
	Category      string `json:"category,omitempty"`
	LedgerAccount string `json:"ledger_account,omitempty"`
	DaysInterval  int    `json:"days_interval,omitempty"`
}

type PaymentsData struct {
	Payments []Payment `json:"payments"`
}

const (
	dataFile   = ".config/waybar/payments.json"
	ledgerFile = "ObsidianVault/finances/transactions.ledger"
)

func getDataPath() string {
	home, _ := os.UserHomeDir()
	return filepath.Join(home, dataFile)
}

func getLedgerPath() string {
	home, _ := os.UserHomeDir()
	return filepath.Join(home, ledgerFile)
}

func rublesToKopecks(rublesStr string) (int, error) {
	rublesStr = strings.Replace(rublesStr, ",", ".", -1)

	amount, err := strconv.ParseFloat(rublesStr, 64)
	if err != nil {
		return 0, fmt.Errorf("–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã: %v", err)
	}

	return int(amount * 100), nil
}

func formatRubles(kopecks int) string {
	rubles := float64(kopecks) / 100.0
	return fmt.Sprintf("%.2f", rubles)
}

func loadPayments() (*PaymentsData, error) {
	dataPath := getDataPath()
	if _, err := os.Stat(dataPath); os.IsNotExist(err) {
		return &PaymentsData{Payments: []Payment{}}, nil
	}
	file, err := os.ReadFile(dataPath)
	if err != nil {
		return nil, err
	}
	var data PaymentsData
	err = json.Unmarshal(file, &data)
	if err != nil {
		return nil, err
	}

	data = cleanupOldPayments(data)

	return &data, nil
}

func cleanupOldPayments(data PaymentsData) PaymentsData {
	var validPayments []Payment
	now := time.Now()
	cutoffDate := now.AddDate(0, 0, -7)

	for _, payment := range data.Payments {
		if payment.PaymentDate != "" {
			validPayments = append(validPayments, payment)
			continue
		}

		due, err := time.Parse("2006-01-02", payment.DueDate)
		if err != nil {
			validPayments = append(validPayments, payment)
			continue
		}

		if due.After(cutoffDate) {
			validPayments = append(validPayments, payment)
		}
	}

	data.Payments = validPayments
	return data
}

func savePayments(data *PaymentsData) error {
	dataPath := getDataPath()
	dir := filepath.Dir(dataPath)
	if err := os.MkdirAll(dir, 0755); err != nil {
		return err
	}
	file, err := json.MarshalIndent(data, "", "  ")
	if err != nil {
		return err
	}
	return os.WriteFile(dataPath, file, 0644)
}

func recordToLedger(payment Payment) error {
	ledgerPath := getLedgerPath()
	dir := filepath.Dir(ledgerPath)
	if err := os.MkdirAll(dir, 0755); err != nil {
		return err
	}

	file, err := os.OpenFile(ledgerPath, os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644)
	if err != nil {
		return err
	}
	defer file.Close()

	today := time.Now().Format("2006/01/02")

	expenseAccount := "Expenses:Subscriptions"
	if payment.Category != "" {
		expenseAccount = "Expenses:" + strings.ReplaceAll(payment.Category, ":", ":")
	}

	paymentAccount := payment.LedgerAccount
	if paymentAccount == "" {
		paymentAccount = "Liabilities:YandexPay"
	}

	amount := fmt.Sprintf("%.2f RUB", float64(payment.Amount)/100.0)

	entry := fmt.Sprintf("%s * \"%s\"\n    %-40s  %s\n    %s\n\n",
		today,
		payment.Name,
		expenseAccount,
		amount,
		paymentAccount)

	_, err = file.WriteString(entry)
	return err
}

func daysUntil(dueDate string) int {
	today := time.Now()
	due, err := time.Parse("2006-01-02", dueDate)
	if err != nil {
		return 999
	}
	return int(due.Sub(today).Hours() / 24)
}

func getNearestPayment() *Payment {
	data, err := loadPayments()
	if err != nil || len(data.Payments) == 0 {
		return nil
	}
	var nearest *Payment
	minDays := 999
	for i := range data.Payments {
		if data.Payments[i].PaymentDate != "" {
			continue
		}
		days := daysUntil(data.Payments[i].DueDate)
		if days < minDays {
			minDays = days
			nearest = &data.Payments[i]
		}
	}
	return nearest
}

func extendPaymentDate(payment Payment) string {
	due, err := time.Parse("2006-01-02", payment.DueDate)
	if err != nil {
		due = time.Now()
	}

	if payment.DaysInterval > 0 {
		return due.AddDate(0, 0, payment.DaysInterval).Format("2006-01-02")
	}

	switch payment.Type {
	case "yearly":
		return due.AddDate(1, 0, 0).Format("2006-01-02")
	case "monthly":
		return due.AddDate(0, 1, 0).Format("2006-01-02")
	default:
		return due.Format("2006-01-02")
	}
}

func displayWidget() {
	payment := getNearestPayment()
	if payment == nil {
		fmt.Println("üí≥ –ù–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π")
		return
	}

	days := daysUntil(payment.DueDate)
	amount := formatRubles(payment.Amount)
	name := payment.Name
	if len(name) > 12 {
		name = name[:12] + "‚Ä¶"
	}

	var icon string
	if days < 0 {
		icon = "üî¥"
	} else if days == 0 {
		icon = "üü†"
	} else if days <= 7 {
		icon = "üü°"
	} else {
		icon = "üü¢"
	}

	intervalInfo := ""
	if payment.DaysInterval > 0 {
		intervalInfo = fmt.Sprintf(" [%d–¥]", payment.DaysInterval)
	}

	fmt.Printf("%s %s %s‚ÇΩ ¬∑ %d–¥%s\n", icon, name, amount, days, intervalInfo)
}

func markPaid() {
	data, err := loadPayments()
	if err != nil {
		fmt.Println("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
		return
	}

	payment := getNearestPayment()
	if payment == nil {
		fmt.Println("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π")
		return
	}

	today := time.Now().Format("2006-01-02")

	if err := recordToLedger(*payment); err != nil {
		fmt.Printf("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Ledger: %v\n", err)
	} else {
		fmt.Printf("–ó–∞–ø–∏—Å—å –≤ Ledger –¥–æ–±–∞–≤–ª–µ–Ω–∞\n")
	}

	for i := range data.Payments {
		if data.Payments[i].ID == payment.ID {
			data.Payments[i].PaymentDate = today

			if payment.Type != "one-time" || payment.DaysInterval > 0 {
				newDueDate := extendPaymentDate(data.Payments[i])
				data.Payments[i].DueDate = newDueDate
				data.Payments[i].PaymentDate = ""

				intervalInfo := ""
				if payment.DaysInterval > 0 {
					intervalInfo = fmt.Sprintf(" (–∏–Ω—Ç–µ—Ä–≤–∞–ª %d –¥–Ω–µ–π)", payment.DaysInterval)
				}

				fmt.Printf("‚úÖ %s –æ–ø–ª–∞—á–µ–Ω, —Å–ª–µ–¥—É—é—â–∏–π –ø–ª–∞—Ç–µ–∂: %s%s\n", payment.Name, newDueDate, intervalInfo)
			} else {
				fmt.Printf("‚úÖ %s –æ–ø–ª–∞—á–µ–Ω\n", payment.Name)
			}
			break
		}
	}

	savePayments(data)
	displayWidget()
}

func listPayments() {
	data, err := loadPayments()
	if err != nil || len(data.Payments) == 0 {
		fmt.Println("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π")
		return
	}

	var activePayments []Payment
	totalAmount := 0

	for _, p := range data.Payments {
		if p.PaymentDate == "" {
			activePayments = append(activePayments, p)
			totalAmount += p.Amount
		}
	}

	if len(activePayments) == 0 {
		fmt.Println("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π")
		return
	}

	sort.Slice(activePayments, func(i, j int) bool {
		return daysUntil(activePayments[i].DueDate) < daysUntil(activePayments[j].DueDate)
	})

	var overdue, urgent, upcoming []Payment

	for _, p := range activePayments {
		days := daysUntil(p.DueDate)
		if days < 0 {
			overdue = append(overdue, p)
		} else if days <= 7 {
			urgent = append(urgent, p)
		} else {
			upcoming = append(upcoming, p)
		}
	}

	fmt.Println("–ê–ö–¢–ò–í–ù–´–ï –ü–õ–ê–¢–ï–ñ–ò:")
	fmt.Println("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")
	fmt.Println()

	if len(overdue) > 0 {
		fmt.Println("üî¥ –°–†–û–ß–ù–û (–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ):")
		for _, p := range overdue {
			days := daysUntil(p.DueDate)
			amountRubles := formatRubles(p.Amount)
			fmt.Printf("   ‚Ä¢ %s: %s‚ÇΩ (%d –¥–Ω–µ–π) [%s]", p.Name, amountRubles, -days, p.Type)
			if p.LedgerAccount != "" {
				fmt.Printf(" [%s]", p.LedgerAccount)
			}
			fmt.Println()
		}
		fmt.Println()
	}

	if len(urgent) > 0 {
		fmt.Println("üü° –ë–õ–ò–ñ–ê–ô–®–ò–ï:")
		for _, p := range urgent {
			days := daysUntil(p.DueDate)
			amountRubles := formatRubles(p.Amount)
			fmt.Printf("   ‚Ä¢ %s: %s‚ÇΩ (%d –¥–Ω–µ–π) [%s]", p.Name, amountRubles, days, p.Type)
			if p.LedgerAccount != "" {
				fmt.Printf(" [%s]", p.LedgerAccount)
			}
			fmt.Println()
		}
		fmt.Println()
	}

	if len(upcoming) > 0 {
		fmt.Println("üü¢ –û–ñ–ò–î–ê–ï–ú–´–ï:")
		for _, p := range upcoming {
			days := daysUntil(p.DueDate)
			amountRubles := formatRubles(p.Amount)
			fmt.Printf("   ‚Ä¢ %s: %s‚ÇΩ (%d –¥–Ω–µ–π) [%s]", p.Name, amountRubles, days, p.Type)
			if p.LedgerAccount != "" {
				fmt.Printf(" [%s]", p.LedgerAccount)
			}
			fmt.Println()
		}
		fmt.Println()
	}

	totalRubles := formatRubles(totalAmount)
	fmt.Printf("üìä –ò–¢–û–ì–û: %d –ø–ª–∞—Ç–µ–∂–µ–π –Ω–∞ %s‚ÇΩ\n", len(activePayments), totalRubles)
}

func addPayment() {
	addCmd := flag.NewFlagSet("add", flag.ExitOnError)
	name := addCmd.String("name", "", "–ù–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞")
	amountStr := addCmd.String("amount", "", "–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ –≤ —Ä—É–±–ª—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 349.90)")
	dueDate := addCmd.String("date", "", "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è (–ì–ì–ì–ì-–ú–ú-–î–î)")
	days := addCmd.Int("days", 0, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –¥–∞—Ç–µ)")
	paymentType := addCmd.String("type", "monthly", "–¢–∏–ø: monthly, yearly, one-time")
	category := addCmd.String("category", "", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è")
	ledgerAccount := addCmd.String("ledger-account", "", "–°—á–µ—Ç –¥–ª—è ledger")

	addCmd.Parse(os.Args[2:])

	if *name == "" || *amountStr == "" {
		fmt.Println("–û—à–∏–±–∫–∞: –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å --name –∏ --amount")
		addCmd.Usage()
		return
	}

	amount, err := rublesToKopecks(*amountStr)
	if err != nil {
		fmt.Printf("–û—à–∏–±–∫–∞: %v\n", err)
		return
	}

	var finalDueDate string
	if *days > 0 {
		finalDueDate = time.Now().AddDate(0, 0, *days).Format("2006-01-02")
	} else if *dueDate != "" {
		_, err = time.Parse("2006-01-02", *dueDate)
		if err != nil {
			fmt.Printf("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ì–ì–ì–ì-–ú–ú-–î–î %v\n", err)
			return
		}
		finalDueDate = *dueDate
	} else {
		fmt.Printf("–û—à–∏–±–∫–∞: –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ª–∏–±–æ --date, –ª–∏–±–æ --days\n")
		addCmd.Usage()
		return
	}

	validTypes := map[string]bool{
		"monthly":  true,
		"yearly":   true,
		"one-time": true,
	}
	if !validTypes[*paymentType] {
		fmt.Printf("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø. –î–æ–ø—É—Å—Ç–∏–º—ã–µ: monthly, yearly, one-time\n")
		return
	}

	data, err := loadPayments()
	if err != nil {
		data = &PaymentsData{Payments: []Payment{}}
	}

	id := fmt.Sprintf("%s_%s_%s", strings.ToLower(strings.ReplaceAll(*name, " ", "_")), finalDueDate, *paymentType)

	newPayment := Payment{
		ID:            id,
		Name:          *name,
		Amount:        amount,
		DueDate:       finalDueDate,
		Type:          *paymentType,
		Category:      *category,
		LedgerAccount: *ledgerAccount,
		DaysInterval:  *days,
	}

	data.Payments = append(data.Payments, newPayment)
	savePayments(data)

	intervalInfo := ""
	if *days > 0 {
		intervalInfo = fmt.Sprintf(" [–∏–Ω—Ç–µ—Ä–≤–∞–ª %d –¥–Ω–µ–π]", *days)
	}

	accountInfo := ""
	if *ledgerAccount != "" {
		accountInfo = fmt.Sprintf(" -> %s", *ledgerAccount)
	}

	amountRubles := formatRubles(amount)
	fmt.Printf("–ü–ª–∞—Ç–µ–∂ –¥–æ–±–∞–≤–ª–µ–Ω: %s - %s‚ÇΩ - %s [%s]%s%s\n", *name, amountRubles, finalDueDate, *paymentType, intervalInfo, accountInfo)
}

func showLedger() {
	ledgerPath := getLedgerPath()
	if _, err := os.Stat(ledgerPath); os.IsNotExist(err) {
		fmt.Println("Ledger —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
		return
	}

	content, err := os.ReadFile(ledgerPath)
	if err != nil {
		fmt.Printf("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Ledger —Ñ–∞–π–ª–∞: %v\n", err)
		return
	}

	lines := strings.Split(string(content), "\n")
	recentLines := lines[len(lines)-10:]
	fmt.Println("–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ Ledger:")
	for _, line := range recentLines {
		if strings.TrimSpace(line) != "" {
			fmt.Println(line)
		}
	}
}

func showHelp() {
	fmt.Println(`Payments CLI - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞–º–∏

–ö–æ–º–∞–Ω–¥—ã:
  payments-cli                    - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∏–¥–∂–µ—Ç —Å –±–ª–∏–∂–∞–π—à–∏–º –ø–ª–∞—Ç–µ–∂–æ–º
  payments-cli paid               - –û—Ç–º–µ—Ç–∏—Ç—å –±–ª–∏–∂–∞–π—à–∏–π –ø–ª–∞—Ç–µ–∂ –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π
  payments-cli list               - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
  payments-cli add                - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂
  payments-cli ledger             - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ Ledger
  payments-cli cleanup            - –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –ø–ª–∞—Ç–µ–∂–∏

–ö–æ–º–∞–Ω–¥–∞ add (–ø—Ä–∏–º–µ—Ä—ã):
  # –° —É–∫–∞–∑–∞–Ω–∏–µ–º –¥–∞—Ç—ã
  payments-cli add --name "Yandex Plus" --amount 349.90 --date 2024-10-22 --type monthly --category subscriptions
  
  # –° —É–∫–∞–∑–∞–Ω–∏–µ–º –¥–Ω–µ–π
  payments-cli add --name "–•–æ—Å—Ç–∏–Ω–≥" --amount 1500.00 --days 40 --type one-time --category hosting
  
  # –° —É–∫–∞–∑–∞–Ω–∏–µ–º —Å—á–µ—Ç–∞ Ledger
  payments-cli add --name "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç" --amount 500.00 --date 2024-11-01 --type monthly --category utilities --ledger-account Liabilities:AlfaBank`)
}

func main() {
	if len(os.Args) == 1 {
		displayWidget()
		return
	}

	switch os.Args[1] {
	case "paid":
		markPaid()
	case "list":
		listPayments()
	case "add":
		addPayment()
	case "ledger":
		showLedger()
	case "cleanup":
		data, err := loadPayments()
		if err != nil {
			fmt.Printf("–û—à–∏–±–∫–∞: %v\n", err)
			return
		}
		initialCount := len(data.Payments)

		*data = cleanupOldPayments(*data)
		savePayments(data)

		fmt.Printf("–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ %d —Å—Ç–∞—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π\n", initialCount-len(data.Payments))
	case "help", "-h", "--help":
		showHelp()
	default:
		displayWidget()
	}
}
