package commands

import (
	"fmt"
	"strconv"
	"strings"

	"github.com/sunriseex/finance-manager/internal/config"
	"github.com/sunriseex/finance-manager/internal/services"
	"github.com/sunriseex/finance-manager/internal/storage"
	"github.com/sunriseex/finance-manager/pkg/dates"
	"github.com/sunriseex/finance-manager/pkg/errors"
)

func DepositCreate(name, bank, depositType string, amount int, interestRate float64, termMonths int, promoRate *float64, promoEndDate string) error {
	service := services.NewDepositService()

	req := &services.CreateDepositRequest{
		Name:         name,
		Bank:         bank,
		Type:         depositType,
		Amount:       amount,
		InterestRate: interestRate,
		TermMonths:   termMonths,
		PromoRate:    promoRate,
		PromoEndDate: promoEndDate,
	}

	response, err := service.Create(req)
	if err != nil {
		return err
	}

	fmt.Printf("‚úÖ %s\n", response.Message)
	fmt.Printf("   –í–∫–ª–∞–¥: %s\n", response.Deposit.Name)
	fmt.Printf("   ID: %s\n", response.DepositID)
	fmt.Printf("   –°—É–º–º–∞: %.2f —Ä—É–±.\n", float64(response.Deposit.Amount)/100.0)
	fmt.Printf("   –°—Ç–∞–≤–∫–∞: %.2f%%\n", response.Deposit.InterestRate)

	if promoRate != nil {
		fmt.Printf("   –ü—Ä–æ–º–æ-—Å—Ç–∞–≤–∫–∞: %.2f%% (–¥–æ %s)\n", *promoRate, promoEndDate)
	}

	if depositType == "term" {
		fmt.Printf("   –°—Ä–æ–∫: %d –º–µ—Å—è—Ü–µ–≤\n", termMonths)
		fmt.Printf("   –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: %s\n", response.Deposit.EndDate)
	}

	return nil
}

func DepositList() error {
	service := services.NewDepositService()

	response, err := service.List()
	if err != nil {
		return err
	}

	if response.TotalCount == 0 {
		fmt.Println("üíº –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–∫–ª–∞–¥–æ–≤")
		return nil
	}

	fmt.Println("üíº –ê–ö–¢–ò–í–ù–´–ï –í–ö–õ–ê–î–´:")
	fmt.Println("===================")

	for i, deposit := range response.Deposits {
		amountRubles := float64(deposit.Amount) / 100.0

		fmt.Printf("%d. %s (%s)\n", i+1, deposit.Name, deposit.Bank)
		fmt.Printf("   –°—É–º–º–∞: %.2f —Ä—É–±.\n", amountRubles)

		active, daysLeft := services.CheckPromoStatus(deposit)
		if active {
			fmt.Printf("   –ü—Ä–æ–º–æ-—Å—Ç–∞–≤–∫–∞: %.2f%% (–¥–æ %s, –æ—Å—Ç–∞–ª–æ—Å—å %d –¥–Ω.)\n",
				*deposit.PromoRate, deposit.PromoEndDate, daysLeft)
		} else {
			fmt.Printf("   –°—Ç–∞–≤–∫–∞: %.2f%%\n", deposit.InterestRate)
		}

		fmt.Printf("   –¢–∏–ø: %s\n", deposit.Type)

		incomeReq := &services.CalculateIncomeRequest{
			DepositID: deposit.ID,
			Days:      30,
		}
		incomeResp, err := service.CalculateIncome(incomeReq)
		if err == nil {
			fmt.Printf("   –î–æ—Ö–æ–¥ –≤ –º–µ—Å—è—Ü: ~%.2f —Ä—É–±.\n", incomeResp.ExpectedIncome)
		} else {
			fmt.Printf("   –î–æ—Ö–æ–¥ –≤ –º–µ—Å—è—Ü: —Ä–∞—Å—á–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n")
		}
		fmt.Println()
	}

	totalRubles := float64(response.TotalAmount) / 100.0
	fmt.Printf("üìä –ò–¢–û–ì–û: %d –≤–∫–ª–∞–¥–æ–≤ –Ω–∞ —Å—É–º–º—É %.2f —Ä—É–±.\n", response.TotalCount, totalRubles)

	return nil
}

func DepositTopUp(depositID string, amount int) error {
	service := services.NewDepositService()

	req := &services.TopUpRequest{
		DepositID:   depositID,
		Amount:      amount,
		Description: "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ CLI",
	}

	response, err := service.TopUp(req)
	if err != nil {
		return err
	}

	fmt.Printf("‚úÖ %s\n", response.Message)
	fmt.Printf("   –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—É–º–º–∞: %.2f —Ä—É–±.\n", float64(response.PreviousAmount)/100.0)
	fmt.Printf("   –ù–æ–≤–∞—è —Å—É–º–º–∞: %.2f —Ä—É–±.\n", float64(response.NewAmount)/100.0)
	fmt.Printf("   –ü–æ–ø–æ–ª–Ω–µ–Ω–æ –Ω–∞: %.2f —Ä—É–±.\n", float64(amount)/100.0)

	return nil
}

func DepositCalculateIncome(depositID string, days int) error {
	service := services.NewDepositService()

	req := &services.CalculateIncomeRequest{
		DepositID: depositID,
		Days:      days,
	}

	response, err := service.CalculateIncome(req)
	if err != nil {
		return err
	}

	deposit, err := storage.GetDepositByID(depositID, config.AppConfig.DepositsDataPath)
	if err == nil && deposit.PromoRate != nil {
		active, daysUntilPromoEnd := services.CheckPromoStatus(*deposit)
		if active {
			fmt.Printf("üéØ –£—á—Ç–µ–Ω–∞ –ø—Ä–æ–º–æ-—Å—Ç–∞–≤–∫–∞: %.2f%% (–¥–µ–π—Å—Ç–≤—É–µ—Ç –µ—â–µ %d –¥–Ω–µ–π)\n",
				*deposit.PromoRate, daysUntilPromoEnd)
		}
	}

	fmt.Printf("üìà –†–∞—Å—á–µ—Ç –¥–æ—Ö–æ–¥–∞ –ø–æ –≤–∫–ª–∞–¥—É '%s':\n", response.DepositName)
	fmt.Printf("   –°—É–º–º–∞ –≤–∫–ª–∞–¥–∞: %.2f —Ä—É–±.\n", response.Amount)
	fmt.Printf("   –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞: %.2f%%\n", response.InterestRate)
	fmt.Printf("   –ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è: %s\n", response.Capitalization)
	fmt.Printf("   –ü–µ—Ä–∏–æ–¥: %d –¥–Ω–µ–π\n", response.PeriodDays)
	fmt.Printf("   –û–∂–∏–¥–∞–µ–º—ã–π –¥–æ—Ö–æ–¥: %.2f —Ä—É–±.\n", response.ExpectedIncome)
	fmt.Printf("   –û–±—â–∞—è —Å—É–º–º–∞: %.2f —Ä—É–±.\n", response.TotalAmount)

	return nil
}

func DepositUpdate(depositID string) error {
	service := services.NewDepositService()

	req := &services.UpdateDepositRequest{
		DepositID: depositID,
	}

	response, err := service.Update(req)
	if err != nil {
		return err
	}

	fmt.Printf("‚úÖ %s\n", response.Message)
	fmt.Printf("   –í–∫–ª–∞–¥: %s\n", response.DepositName)
	fmt.Printf("   –ù–æ–≤–∞—è –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: %s\n", response.StartDate)
	fmt.Printf("   –ù–æ–≤–∞—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: %s\n", response.EndDate)
	fmt.Printf("   –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: %s\n", response.TopUpEndDate)

	return nil
}

func DepositAccrueInterest() error {
	service := services.NewInterestService()

	req := &services.AccrueInterestRequest{}

	response, err := service.AccrueInterest(req)
	if err != nil {
		return err
	}

	if response.SuccessCount > 0 {
		fmt.Printf("‚úÖ %s\n", response.Message)
	} else {
		fmt.Println("‚ÑπÔ∏è  –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∫–ª–∞–¥–æ–≤ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤")
	}

	if response.ErrorCount > 0 {
		fmt.Printf("\n‚ö†Ô∏è  –ü—Ä–æ–∏–∑–æ—à–ª–∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ (%d –æ—à–∏–±–æ–∫):\n", response.ErrorCount)
		for _, result := range response.Results {
			if !result.Success {
				fmt.Printf("   ‚Ä¢ %s: %s\n", result.DepositName, errors.GetUserFriendlyMessage(result.Error))
			}
		}
	}

	return nil
}

func DepositFind(name, bank string) error {
	service := services.NewDepositService()

	req := &services.FindDepositRequest{
		Name: name,
		Bank: bank,
	}

	response, err := service.Find(req)
	if err != nil {
		return err
	}

	if !response.Found {
		fmt.Printf("–í–∫–ª–∞–¥ '%s' –≤ –±–∞–Ω–∫–µ '%s' –Ω–µ –Ω–∞–π–¥–µ–Ω\n", name, bank)
		return nil
	}

	deposit := response.Deposit
	amountRubles := float64(deposit.Amount) / 100.0
	fmt.Printf("–ù–∞–π–¥–µ–Ω –≤–∫–ª–∞–¥:\n")
	fmt.Printf("  ID: %s\n", deposit.ID)
	fmt.Printf("  –ù–∞–∑–≤–∞–Ω–∏–µ: %s\n", deposit.Name)
	fmt.Printf("  –ë–∞–Ω–∫: %s\n", deposit.Bank)
	fmt.Printf("  –¢–∏–ø: %s\n", deposit.Type)
	fmt.Printf("  –°—É–º–º–∞: %.2f —Ä—É–±.\n", amountRubles)
	fmt.Printf("  –°—Ç–∞–≤–∫–∞: %.2f%%\n", deposit.InterestRate)

	if deposit.Type == "term" {
		fmt.Printf("  –°—Ä–æ–∫: %d –º–µ—Å—è—Ü–µ–≤\n", deposit.TermMonths)
		if deposit.EndDate != "" {
			daysLeft := dates.DaysUntil(deposit.EndDate)
			fmt.Printf("  –î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è: %d –¥–Ω–µ–π\n", daysLeft)
		}
	}

	return nil
}

func ParseRubles(amountStr string) (int, error) {
	amountStr = strings.Replace(amountStr, ",", ".", -1)
	amount, err := strconv.ParseFloat(amountStr, 64)
	if err != nil {
		return 0, errors.NewValidationError(
			"–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã",
			map[string]interface{}{
				"amount": amountStr,
				"error":  err.Error(),
			},
		)
	}

	if amount <= 0 {
		return 0, errors.NewValidationError(
			"—Å—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π",
			map[string]interface{}{
				"amount": amount,
			},
		)
	}

	if amount > 1000000 {
		return 0, errors.NewValidationError(
			"—Å—É–º–º–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è",
			map[string]interface{}{
				"amount":     amount,
				"max_amount": 1000000,
			},
		)
	}

	return int(amount * 100), nil
}

func ParseDays(daysStr string) (int, error) {
	days, err := strconv.Atoi(daysStr)
	if err != nil {
		return 0, errors.NewValidationError(
			"–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π",
			map[string]interface{}{
				"days":  daysStr,
				"error": err.Error(),
			},
		)
	}
	if days <= 0 {
		return 0, errors.NewValidationError(
			"–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º",
			map[string]interface{}{
				"days": days,
			},
		)
	}
	if days > 3650 {
		return 0, errors.NewValidationError(
			"–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ",
			map[string]interface{}{
				"days":     days,
				"max_days": 3650,
			},
		)
	}
	return days, nil
}

func ParseRate(rateStr string) (float64, error) {
	rateStr = strings.Replace(rateStr, ",", ".", -1)
	rate, err := strconv.ParseFloat(rateStr, 64)
	if err != nil {
		return 0, errors.NewValidationError(
			"–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π —Å—Ç–∞–≤–∫–∏",
			map[string]interface{}{
				"rate":  rateStr,
				"error": err.Error(),
			},
		)
	}
	if rate <= 0 {
		return 0, errors.NewValidationError(
			"–ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π",
			map[string]interface{}{
				"rate": rate,
			},
		)
	}
	if rate > 100 {
		return 0, errors.NewValidationError(
			"–ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 100%",
			map[string]interface{}{
				"rate": rate,
			},
		)
	}
	return rate, nil
}

func ParseTerm(termStr string) (int, error) {
	term, err := strconv.Atoi(termStr)
	if err != nil {
		return 0, errors.NewValidationError(
			"–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ä–æ–∫–∞",
			map[string]interface{}{
				"term":  termStr,
				"error": err.Error(),
			},
		)
	}
	if term <= 0 {
		return 0, errors.NewValidationError(
			"—Å—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º",
			map[string]interface{}{
				"term": term,
			},
		)
	}
	if term > 60 {
		return 0, errors.NewValidationError(
			"—Å—Ä–æ–∫ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 60 –º–µ—Å—è—Ü–µ–≤",
			map[string]interface{}{
				"term":     term,
				"max_term": 60,
			},
		)
	}
	return term, nil
}
